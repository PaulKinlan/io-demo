(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))r(n);new MutationObserver(n=>{for(const a of n)if(a.type==="childList")for(const i of a.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&r(i)}).observe(document,{childList:!0,subtree:!0});function o(n){const a={};return n.integrity&&(a.integrity=n.integrity),n.referrerPolicy&&(a.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?a.credentials="include":n.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function r(n){if(n.ep)return;n.ep=!0;const a=o(n);fetch(n.href,a)}})();console.log("Language Learning Tool script loaded.");const V=document.getElementById("learning-section"),S=document.getElementById("translation-section"),j=document.getElementById("setup-section"),B=document.getElementById("source-language"),$=document.getElementById("target-language"),N=document.getElementById("proficiency"),s=document.getElementById("translator-status"),L=document.getElementById("description-text"),P=document.getElementById("question-section"),M=document.getElementById("questions");document.getElementById("camera-permission-element");const T=document.getElementById("camera-dialog"),g=document.getElementById("camera-video"),y=document.getElementById("camera-canvas"),Q=document.getElementById("camera-capture-button"),R=document.getElementById("start"),z=document.getElementById("camera-button");let l="en",c="fr",m="beginner",x=null,v=[],b=null,h=null,p=null;const w={en:"English",fr:"French",es:"Spanish",pt:"Portuguese",de:"German",it:"Italian",jp:"Japanese"};async function H(){console.log("Initializing app..."),B.value=l,$.value=c,N.value=m,await E(),J();try{if(typeof LanguageModel<"u"){console.log("Checking availability...");const e=await LanguageModel.availability({expectedInputs:[{type:"image"}]});if(console.log("LanguageModel availability:",e),e!=="available")return console.error("LanguageModel not available for image input."),"Error: Language Model not available for image input.";console.log("Attempting to create LanguageModel..."),b=await LanguageModel.create({expectedInputs:[{type:"image"}],monitor(t){t.addEventListener("downloadprogress",o=>{console.log(`Language Model: Image, Downloaded ${o.loaded} of ${o.total} bytes.`)})}}),console.log("LanguageModel created successfully.")}else console.error("On-device Language Model API (LanguageModel) not available."),s.textContent+=" (Language Model API unavailable)",s.className="unavailable"}catch(e){console.error("Error creating LanguageModel:",e),s.textContent+=" (Error initializing Language Model)",s.className="unavailable"}console.log("App initialized.")}async function E(){if(s.textContent="Checking compatibility...",s.className="checking",typeof window.Translator>"u")return console.warn("Translator API (window.Translator) not available."),s.textContent="Translator API not available.",s.className="unavailable",!1;try{const e=await Translator.availability({sourceLanguage:l,targetLanguage:c});return console.log(`Translator availability for ${l} -> ${c}: ${e}`),e==="available"||e==="readilyAvailable"||e==="downloadRequired"?(s.textContent=`Language pair supported (${e}).`,s.className="available",!0):(s.textContent=`Language pair not supported (${e}).`,s.className="unavailable",!1)}catch(e){return console.error("Error checking Translator availability:",e),s.textContent="Error checking compatibility.",s.className="unavailable",!1}}function J(){B.addEventListener("change",F),$.addEventListener("change",G),N.addEventListener("change",W),z.addEventListener("click",Z),R.addEventListener("click",Y),Q.addEventListener("click",ee)}async function F(e){const t=e.target.value;l!==t&&(l=t,console.log("Source language changed to:",l),await E())}async function G(e){const t=e.target.value;c!==t&&(c=t,console.log("Target language changed to:",c),await E())}function W(){const e=event.target.value;m!==e&&(m=e,console.log("proficiency changed to:",m))}async function Y(){if(console.log("Starting translation..."),!await E()){alert("Selected language pair is not supported for translation. Please choose different languages.");return}const t=await Translator.create({sourceLanguage:l,targetLanguage:c});console.log("Translator initialized:",t);let o=0;for(const r of v){console.log("Translating question:",r);const n=await t.translate(r);console.log("Translation result:",n),X(r,n,o++)}document.startViewTransition(()=>{S.classList.add("visible"),P.classList.remove("visible")})}async function K(e,t,o){const r=`<description>${L.textContent}</description>`,n=await LanguageModel.create({expectedInputs:[{type:"text"},{type:"image"}],monitor(u){u.addEventListener("downloadprogress",d=>{console.log(`Language Model: Text, Downloaded ${d.loaded} of ${d.total} bytes.`)})}}),a=`The user is a ${m} learning ${w[c]} and is trying to answer the provided question. 
  
  Question (${w[c]}): ${t}
  
  They're answer in (${w[c]}) is: ${o}

  Using the attached image and description (<description>) is the answer they provided correct?`,i=await n.prompt([{type:"text",content:a},{type:"image",content:await createImageBitmap(x)},{type:"text",content:r}],{responseConstraint:{type:"object",properties:{correct:{type:"boolean",description:"True if the answer is correct, false otherwise."},reason:{type:"string",description:"Explanation of the answer correctness. Help the user understand where they went wrong or could improve their answer. Tell them what the answer should have been if it can be determined"}},additionalProperties:!1}});return console.log("Answer Model output:",i),JSON.parse(i)}function X(e,t,o){const r=document.createElement("template");r.innerHTML=`
  <div class="text-question">
  <div class="question"> 
    <span class="question-text">${t}</span>
    <form>
      <input type="text" class="answer-input" placeholder="Your answer here..." />
      <button class="check-answer-button">Check</button>
    </form
    </div>
    <div class="answer"><!-- answer.correct / answer.incorrect -->
      <div class="incorrect">
        <p><img src="/images/wrong.svg"> Incorrect</p>
        <p>Question: ${e}</p>
      </div>
      <div class="correct"><p><img src="/images/tick.svg">Well done!</p></div>
      <div class="reason"></div>    
    </div>
  </div>
  `;const n=document.createElement("div");n.className="translation",n.style.viewTransitionName="translation"+o;const a=r.content.cloneNode(!0),i=a.querySelector(".check-answer-button"),u=a.querySelector("form"),d=async f=>{f.preventDefault();const I=f.target.parentElement.parentElement.parentElement,k=I.querySelector(".answer-input"),A=I.querySelector(".answer"),D=I.querySelector(".reason"),O=k.value,{correct:C,reason:U}=await K(e,t,O);console.log("Answer correctness:",C),await document.startViewTransition(()=>{A.classList.add(C?"correct":"incorrect"),C==!1&&(D.innerText=U)}).finished,I.parentElement.nextElementSibling.scrollIntoView({container:"nearest"})};i.addEventListener("click",d),u.addEventListener("submit",d),n.appendChild(a),S.appendChild(n)}async function Z(){if(console.log("Camera button clicked"),!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia){alert("Camera access (getUserMedia) is not supported by your browser.");return}await _()}async function _(){console.log("Starting camera stream...");try{h=await navigator.mediaDevices.getUserMedia({video:{facingMode:"environment"},audio:!1}),g.srcObject=h,g.onloadedmetadata=async()=>{await document.startViewTransition(()=>{j.classList.add("move")}).finished;const t=document.startViewTransition(()=>{T.showModal(),console.log("Camera stream active and dialog shown.")})}}catch(e){console.error("Error accessing camera:",e),q()}}function q(){h&&(console.log("Stopping camera stream tracks..."),h.getTracks().forEach(e=>e.stop()),h=null,g.srcObject=null)}async function ee(){if(console.log("Capturing photo..."),!g.srcObject){console.error("Camera stream not active for capture.");return}y.width=g.videoWidth,y.height=g.videoHeight,y.getContext("2d").drawImage(g,0,0,y.width,y.height),y.toBlob(async t=>{if(!t){console.error("Canvas toBlob failed."),q(),T.close();return}console.log("Photo captured as Blob:",t),x=t,p&&URL.revokeObjectURL(p),p=URL.createObjectURL(t);const o=new Image;o.id="selected-image",o.src=p,await new Promise(a=>{o.onload=()=>{console.log("Image preview loaded."),a()}}),g.parentElement.appendChild(o),await document.startViewTransition(async()=>{q();const a=document.getElementById("image-display");a.append(o),a.parentElement.classList.add("visible"),T.close()}).finished,await te(x)},"image/png")}async function te(e){if(!e){console.warn("checkAndProcessImage called with no Blob.");return}console.log("Checking compatibility and processing image Blob..."),L.textContent="Checking languages...",await E()?await ne(e):(alert("Selected language pair is not supported for translation. Please choose different languages."),V.hidden=!0,L.textContent="Description will appear here...",p&&(URL.revokeObjectURL(p),p=null))}async function ne(e){if(!e){console.error("processImage called without a Blob.");return}L.textContent="Generating description...";const t=await oe(e);L.textContent=t||"Could not generate description.",t&&!t.startsWith("Error:")?(v=await re(t,e),ae(v)):v=[]}function ae(e){if(!e||e.length===0){M.innerHTML="<li>No questions generated.</li>";return}M.innerHTML="",e.forEach((t,o)=>{const r=document.createElement("li");r.style.viewTransitionName=`question${o}`;const n=document.createElement("span");n.textContent=`${t}`;const a=document.createElement("button");a.innerHTML='<span class="delete">Delete</span>',a.className="delete-button",a.addEventListener("click",i=>{const u=i.target.parentElement;u.style.viewTransitionName="deleteQuestion",document.startViewTransition(()=>{let d=0,f=u;for(;f.previousElementSibling;)d++,f=f.previousElementSibling;u.remove(),v.splice(d,1),console.log("Question deleted:",t)})}),r.appendChild(n),r.appendChild(a),M.appendChild(r),P.className="visible"})}async function oe(e){if(console.log("getImageDescription called with image Blob:",e),!e)return console.error("No image Blob provided to getImageDescription."),"Error: No image data.";try{console.log("Sending image Blob to LanguageModel for description...");const t=await LanguageModel.availability({expectedInputs:[{type:"image"}]});if(console.log("LanguageModel availability:",t),t!=="available")return console.error("LanguageModel not available for image input."),"Error: Language Model not available for image input.";b=await LanguageModel.create({expectedInputs:[{type:"image"}],monitor(r){r.addEventListener("downloadprogress",n=>{console.log(`Language Model: Image, Downloaded ${n.loaded} of ${n.total} bytes.`)})}});const o=await b.prompt(["describe this image",{type:"image",content:await createImageBitmap(e)}]);return console.log("LanguageModel description output:",o),o}catch(t){return console.error("Error getting image description from LanguageModel:",t),`Error generating description: ${t.message}`}}async function re(e,t){if(!b)return console.error("LanguageModel not initialized."),["Error: Language Model not available."];if(!e)return console.error("No description provided to getQuestions."),["Error: No description provided."];try{console.log("Sending description to LanguageModel for questions...");const o=`You are a language tutor helping a ${m}. 
    
    Generate 20 to 30 questions in ${w[l]} about the included image and description in <description>. The questions should be simple, clear and be something a ${m} learner can answer.`,r=await b.prompt([{type:"text",content:o},{type:"image",content:await createImageBitmap(t)},{type:"text",content:`<description>${e}</description>`},{type:"text",content:`The questions MUST be in ${w[l]}`}],{responseConstraint:{type:"object",required:["questions"],additionalProperties:!1,properties:{questions:{type:"array",items:{type:"string"}}}}});console.log("LanguageModel questions output:",r);const n=JSON.parse(r).questions;if(!Array.isArray(n))return console.warn("LanguageModel returned non-array questions."),["No questions could be generated."];const a=n.map(i=>i.trim()).filter(i=>i.length>0);return a.length===0?(console.warn("LanguageModel returned no questions."),["No questions could be generated."]):a}catch(o){return console.error("Error getting questions from LanguageModel:",o),[`Error generating questions: ${o.message}`]}}document.addEventListener("DOMContentLoaded",H);
